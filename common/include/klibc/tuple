#pragma once

#include <cstddef>

namespace std
{

template<typename... _Elements>
struct tuple_size;

#if __cplusplus > 201402L
template <typename _Tp>
inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;
#endif

template<size_t __i, typename... Ts>
struct tuple_element;

/**
 * Error case for tuple_element: invalid index.
 */
    template<size_t __i, typename Tp>
    struct tuple_element<__i, Tp>
    {
        static_assert(__i < tuple_size<Tp>::value,
                      "tuple index must be in range");
    };

}
