include(CheckCCompilerFlag)

set(KERNEL_BINARY kernel.x)

check_c_compiler_flag(-mno-outline-atomics HAS_MNO_OUTLINE_ATOMICS)
if (HAS_MNO_OUTLINE_ATOMICS)
    set(MNO_OUTLINE_ATOMIC -mno-outline-atomics)
    else()
    set(MNO_OUTLINE_ATOMIC "")
endif()

set(KERNEL_COMMON_FLAGS -O2 -gdwarf-4 -Wall -Wextra -Werror -Wno-error=format -Wno-nonnull-compare -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-stack-protector -ffreestanding -Wno-strict-aliasing -fshort-wchar -fno-sync-libcalls ${MNO_OUTLINE_ATOMIC} ${NOPICFLAG})

set(KERNEL_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${KERNEL_COMMON_FLAGS} -std=gnu++20 -nostdinc++ -fno-rtti -fno-exceptions)
set(KERNEL_CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${KERNEL_COMMON_FLAGS} -std=gnu11 -nostdlib -fno-exceptions)


set(ADD_LD_ARGUMENT -Wl,"${PROJECT_BINARY_DIR}/lib/debug_info.o")


if ("${VIRTUALIZED_QEMU}" STREQUAL "1")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVIRTUALIZED_QEMU")
 endif ("${VIRTUALIZED_QEMU}" STREQUAL "1")


target_compile_options(arch_options INTERFACE
)

target_link_options(arch_options INTERFACE
    -Wl,--build-id=none -Wl,-z -Wl,max-page-size=0x1000 -nostdinc -nostdlib -nodefaultlibs)


target_link_options(kernel_options INTERFACE
    -Wl,-Map=../kernel.map ${NOPIEFLAG})

target_link_libraries(kernel_options INTERFACE
    -Wl,--no-whole-archive -Wl,-lgcc -Wl,--whole-archive)

target_compile_options(kernel_options INTERFACE
    $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
    $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
    $<$<COMPILE_LANGUAGE:ASM>:${KERNEL_CMAKE_C_FLAGS}>
)

set_property(TARGET kernel PROPERTY ENABLE_EXPORTS 1)

MACRO(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
ENDMACRO(ARCH2OBJ)

add_custom_command(TARGET kernel
    POST_BUILD
    BYPRODUCTS lib/debug_info.o kernel.dbg
    COMMAND add-dbg $<TARGET_FILE:kernel> ${PROJECT_BINARY_DIR}/kernel.dbg
    COMMAND touch ${PROJECT_BINARY_DIR}/debug_info.c
    COMMAND ${CMAKE_C_COMPILER} -c ${PROJECT_BINARY_DIR}/debug_info.c -o ${PROJECT_BINARY_DIR}/lib/debug_info.o
    COMMAND "${OBJCOPY_EXECUTABLE}" --add-section .swebdbg="${PROJECT_BINARY_DIR}/kernel.dbg" --set-section-flags .swebdbg=load,data ${PROJECT_BINARY_DIR}/lib/debug_info.o
    COMMAND rm ${PROJECT_BINARY_DIR}/debug_info.c
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMENT "Creating debug info"
)

# TODO: link debug info into kernel


# sdcard: Create an sdcard for the raspberry pi
add_custom_target(sdcard
  COMMAND ${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/makesdcard.sh "${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/boot/"
  COMMENT "Creating SD card"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )

# sdcardq: Create an sdcard for the raspberry pi (quiet mode)
add_custom_target(sdcardq
  COMMAND ${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/makesdcard.sh "${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/boot/" y /dev/mmcblk0
  COMMENT "Creating SD card in quiet mode"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )

add_custom_target(qemu
  COMMAND qemu-system-aarch64 -M raspi3b -cpu cortex-a53 -m 1024 -drive file=${HDD_IMAGE},if=sd -no-reboot -kernel kernel.x -serial stdio -d guest_errors,unimp -s
  COMMENT "Executing `qemu-system-aarch64 -M raspi3 -cpu cortex-a53 -m 1024 -no-reboot -kernel kernel.x -serial stdio -d guest_errors,unimp`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  COMMAND reset -I
  )

# qemugdb: Run qemu in non debugging mode
add_custom_target(qemugdb
  COMMAND qemu-system-aarch64 -M raspi3b -cpu cortex-a53 -m 1024 -drive file=${HDD_IMAGE},if=sd -no-reboot -kernel kernel.x -serial stdio -d guest_errors,unimp -s -S
  COMMENT "Executing `qemu-system-aarch64 -M raspi3 -cpu cortex-a53 -m 1024 -no-reboot -kernel kernel.x -serial stdio -d guest_errors,unimp -s -S`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  COMMAND reset -I
  )

add_custom_target(lst
  COMMAND rm -rf kernel.asm
  COMMAND aarch64-linux-gnu-objdump -d kernel.x > kernel.lst
  COMMAND reset -I
  )

  add_custom_target(image
  COMMAND rm -rf kernel8.img
  COMMAND aarch64-linux-gnu-objcopy -O binary kernel.x kernel8.img
  COMMAND reset -I
  )

# build_qemu_rpi: Build qemu with raspberry pi support (includes source download)
#add_custom_target(build_qemu_rpi
#  COMMAND ${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/build_qemu_rpi.sh
#  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
#  COMMAND reset -I
#  )
