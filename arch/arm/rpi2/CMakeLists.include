set(KERNEL_BINARY kernel.x)

set(ARCH_RPI_KERNEL_CFLAGS -O0 -gdwarf-4 -Wall -Wextra -Werror -Wno-error=format -Wno-packed-bitfield-compat -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-exceptions -fno-stack-protector -fno-omit-frame-pointer -ffreestanding -Wno-strict-aliasing -fshort-wchar ${NOPICFLAG})

set(KERNEL_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=gnu++20 -Wno-nonnull-compare -nostdinc++ -fno-rtti ${ARCH_RPI_KERNEL_CFLAGS})
set(KERNEL_CMAKE_C_FLAGS   ${CMAKE_C_FLAGS}   -std=gnu11 ${ARCH_RPI_KERNEL_CFLAGS})

target_compile_options(arch_options INTERFACE
    -mapcs -marm -mcpu=cortex-a7+nofp)

target_link_options(arch_options INTERFACE
    -Wl,--build-id=none -Wl,-z,max-page-size=0x1000 -nostdinc -nostdlib -nodefaultlibs)


target_compile_options(kernel_options INTERFACE
    $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
    $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
    $<$<COMPILE_LANGUAGE:ASM>:${KERNEL_CMAKE_C_FLAGS}>
)

target_link_options(kernel_options INTERFACE
    ${NOPIEFLAG})

target_link_libraries(kernel_options INTERFACE
    -Wl,--no-whole-archive -Wl,-lgcc -Wl,--whole-archive)


MACRO(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
ENDMACRO(ARCH2OBJ)


# sdcard: Create an sdcard for the raspberry pi
add_custom_target(sdcard
  COMMAND ${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/makesdcard.sh "${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/boot/"
  COMMENT "Creating SD card"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )

# sdcardq: Create an sdcard for the raspberry pi (quiet mode)
add_custom_target(sdcardq
  COMMAND ${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/makesdcard.sh "${PROJECT_SOURCE_DIR}/arch/arm/rpi/utils/boot/" y /dev/mmcblk0
  COMMENT "Creating SD card in quiet mode"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
    COMMAND qemu-system-arm -kernel kernel.x -m 1024 -M raspi2b -no-reboot -drive if=sd,file=${HDD_IMAGE} -serial stdio -d guest_errors,unimp -s
    COMMENT "Executing `qemu-system-arm -kernel kernel.x -m 1024 -M raspi2b -no-reboot -drive if=sd,file=${HDD_IMAGE} -serial stdio -d guest_errors,unimp -s`"
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND reset -I
    )

# qemugdb: Run qemu in non debugging mode
add_custom_target(qemugdb
    COMMAND qemu-system-arm -kernel kernel.x -m 512 -M raspi2b -no-reboot -drive if=sd,file=${HDD_IMAGE} -serial stdio -d guest_errors,unimp -s -S
    COMMENT "Executing `qemu-system-arm -kernel kernel.x -m 512 -M raspi2 -no-reboot -drive if=sd,file=${HDD_IMAGE} -serial stdio -d guest_errors,unimp -s -S`"
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND reset -I
    )
