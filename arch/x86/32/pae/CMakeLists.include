cmake_minimum_required(VERSION 3.13)

set(KERNEL_BINARY kernel.x)

set(ARCH_X86_32_PAE_KERNEL_CFLAGS -m32 -O0 -gstabs2 -Wall -Wextra -Werror -Wno-error=format -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-exceptions -fno-stack-protector -mno-mmx -mno-sse2 -mno-sse3 ${NOPICFLAG})

set(KERNEL_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=gnu++17 -Wno-nonnull-compare -nostdinc++ -fno-rtti ${ARCH_X86_32_PAE_KERNEL_CFLAGS})
set(KERNEL_CMAKE_C_FLAGS   ${CMAKE_C_FLAGS}   -std=gnu11 ${ARCH_X86_32_PAE_KERNEL_CFLAGS})

set(ARCH_LD_ARGUMENTS -m32 -Wl,--build-id=none -Wl,-z,max-page-size=0x1000 -Wl,-melf_i386 -nostdinc -nostdlib -nodefaultlibs)
set(KERNEL_LD_ARGUMENT ${ARCH_LD_ARGUMENTS} -mcmodel=kernel ${NOPIEFLAG})


target_link_options(kernel_options INTERFACE
    ${KERNEL_LD_ARGUMENT} -mcmodel=kernel ${NOPIEFLAG})

target_compile_options(kernel_options INTERFACE
    $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
    $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
    $<$<COMPILE_LANGUAGE:ASM>:${KERNEL_CMAKE_C_FLAGS}>
    )


MACRO(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
ENDMACRO(ARCH2OBJ)


set(AVAILABLE_MEMORY 8M)
set(NUM_CPUS 2)

set(QEMU_BIN qemu-system-i386)
set(QEMU_FLAGS_COMMON -m ${AVAILABLE_MEMORY} -drive file=${HDD_IMAGE},index=0,media=disk -debugcon stdio -no-reboot -no-shutdown -smp ${NUM_CPUS} -d int -d cpu_reset -d guest_errors  ) # -d pcall -d mmu -d int  -d in_asm
string(REPLACE ";" " " QEMU_FLAGS_COMMON_STR "${QEMU_FLAGS_COMMON}")

# kvm: Run kvm in non debugging mode
add_custom_target(kvm
  COMMAND ${QEMU_BIN} ${QEMU_FLAGS_COMMON} -enable-kvm -cpu kvm32
  COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -enable-kvm -cpu kvm32`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  COMMAND reset -I
  )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
	COMMAND	${QEMU_BIN} ${QEMU_FLAGS_COMMON} -cpu qemu32
	COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -cpu qemu32`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemugdb: Run qemu in non debugging mode
add_custom_target(qemugdb
	COMMAND	${QEMU_BIN} ${QEMU_FLAGS_COMMON} -s -S
	COMMENT "Executing `gdb ${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -s -S on localhost:1234`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemutacos: Run qemu in pipe monitor mode for tacos
add_custom_target(qemutacos
  COMMAND ${QEMU_BIN} -hda ${HDD_IMAGE} -m ${AVAILABLE_MEMORY} -snapshot -monitor pipe:qemu -nographic -debugcon stdio
  COMMENT "Executing `qemu-system-i386 -hda ${HDD_IMAGE} -m ${AVAILABLE_MEMORY} -snapshot -monitor pipe:qemu -nographic -debugcon stdio -no-reboot`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )
