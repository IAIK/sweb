cmake_minimum_required(VERSION 3.13)

include(CheckCCompilerFlag)

set(KERNEL_BINARY kernel64.x)

check_c_compiler_flag(-fcf-protection=none HAS_FCF_PROTECTION_NONE)
if (HAS_FCF_PROTECTION_NONE)
  set(FCF_PROTECTION_FLAG -fcf-protection=none)
else()
  set(FCF_PROTECTION_FLAG )
endif()

set(ARCH_X86_64_KERNEL_CFLAGS -O0 -gdwarf-4 -Wall -Wextra -Werror -Wno-error=format -Wno-nonnull-compare -Wno-address-of-packed-member -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-exceptions -fno-stack-protector -ffreestanding -mcmodel=kernel -mno-red-zone -mgeneral-regs-only -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow -fno-sync-libcalls ${FCF_PROTECTION_FLAG} ${NOPICFLAG})

set(KERNEL_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=gnu++20 -nostdinc++ -fno-rtti ${ARCH_X86_64_KERNEL_CFLAGS})
set(KERNEL_CMAKE_C_FLAGS   ${CMAKE_C_FLAGS}   -std=gnu11 ${ARCH_X86_64_KERNEL_CFLAGS})


target_compile_options(arch_options INTERFACE
    -m64)

target_link_options(arch_options INTERFACE
    -m64 -Wl,--build-id=none -Wl,-z,max-page-size=0x1000 -Wl,-melf_x86_64 -nostdinc -nostdlib -nodefaultlibs)


target_link_options(kernel_options INTERFACE
    -mcmodel=kernel ${NOPIEFLAG})

target_compile_options(kernel_options INTERFACE
    $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
    $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
    $<$<COMPILE_LANGUAGE:ASM>:${KERNEL_CMAKE_C_FLAGS}>
    )


function(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
  file(GLOB arch_files CONFIGURE_DEPENDS "*.32.C")

  if(arch_files)
    set(ARCHOBJS_TARGET ${LIBRARY_NAME}_archobjs)

    add_library(${ARCHOBJS_TARGET} OBJECT ${arch_files})

    target_include_directories(${ARCHOBJS_TARGET}
        PRIVATE
        "$<TARGET_PROPERTY:kernel,INTERFACE_INCLUDE_DIRECTORIES>"
    )

    target_include_directories(${ARCHOBJS_TARGET}
        PRIVATE
        "$<TARGET_PROPERTY:kernel_libc,INTERFACE_INCLUDE_DIRECTORIES>"
    )

    target_compile_options(${ARCHOBJS_TARGET} PRIVATE
      $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
      $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
      $<$<COMPILE_LANGUAGE:ASM>:${KERNEL_CMAKE_C_FLAGS}>
      -m32 -g0 -mcmodel=32 -mgeneral-regs-only -momit-leaf-frame-pointer -Wa,--64 -fno-toplevel-reorder ${FCF_PROTECTION_FLAG}
      )

    set(${ARCHOBJ_LIBNAME} ${ARCHOBJS_TARGET} PARENT_SCOPE)
  endif(arch_files)
endfunction(ARCH2OBJ)


if ("${DEBUG}" STREQUAL "1")
    set(STRIP_DEBUG_INFO "")
else()
    set(STRIP_DEBUG_INFO ${OBJCOPY_EXECUTABLE} $<TARGET_FILE:kernel> --strip-unneeded $<TARGET_FILE:kernel>)
endif()

add_custom_command(TARGET kernel
    POST_BUILD
    BYPRODUCTS ${KERNEL_BINARY} kernel.dbg kernel.unstripped
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:kernel> ${PROJECT_BINARY_DIR}/${KERNEL_BINARY}
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:kernel> ${PROJECT_BINARY_DIR}/kernel.unstripped
    COMMAND ${STRIP_DEBUG_INFO}
    COMMAND ${PROJECT_BINARY_DIR}/add-dbg $<TARGET_FILE:kernel> ${PROJECT_BINARY_DIR}/kernel.dbg
    COMMAND ${OBJCOPY_EXECUTABLE} -O elf32-i386 $<TARGET_FILE:kernel> $<TARGET_FILE:kernel>)

add_dependencies(kernel add-dbg)


set(AVAILABLE_MEMORY 8M)
set(NUM_CPUS 4)

set(DISK_MOUNT_ARG -drive file=${HDD_IMAGE},index=0,media=disk,id=sweb-hdd,if=ide)

set(QEMU_BIN qemu-system-x86_64)
set(QEMU_FLAGS_COMMON -name SWEB -m ${AVAILABLE_MEMORY} ${DISK_MOUNT_ARG} -smp ${NUM_CPUS} -debugcon stdio -no-reboot -no-shutdown  -s -d guest_errors)
string(REPLACE ";" " " QEMU_FLAGS_COMMON_STR "${QEMU_FLAGS_COMMON}")

# kvm: Run kvm in non debugging mode
add_custom_target(kvm
    COMMAND ${QEMU_BIN} ${QEMU_FLAGS_COMMON} -enable-kvm -cpu host
    COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -enable-kvm -cpu host`"
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND reset -I
    )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
	COMMAND ${QEMU_BIN} ${QEMU_FLAGS_COMMON} -cpu qemu64 2>&1 | tee output.log
	COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -cpu qemu64`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemugdb: Run qemu in debugging mode
add_custom_target(qemugdb
	COMMAND ${QEMU_BIN} ${QEMU_FLAGS_COMMON} -S 2>&1 | tee output.log
	COMMENT "Executing `gdb ${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -S on localhost:1234`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemutacos: Run qemu in pipe monitor mode for tacos
add_custom_target(qemutacos
    COMMAND ${QEMU_BIN} -hda ${HDD_IMAGE} -m ${AVAILABLE_MEMORY} -snapshot -monitor pipe:qemu -nographic -debugcon stdio
    COMMENT "Executing `${QEMU_BIN} -hda ${HDD_IMAGE} -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio`"
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )

# net-init: Initializes br0 for target "net"
add_custom_target(net-init
    COMMAND sudo ${PROJECT_SOURCE_DIR}/utils/netinit.sh
    COMMENT "Executing `sudo utils/netinit.sh`"
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    COMMAND reset -I
    )
