set(KERNEL_BINARY kernel64.x)

set(ARCH_X86_64_CFLAGS "-m64 -O0 -gdwarf-2 -Wall -Wextra -Werror -Wno-nonnull-compare -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-exceptions -fno-stack-protector -ffreestanding -mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow ${NOPICFLAG}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -nostdinc++ -fno-rtti ${ARCH_X86_64_CFLAGS}")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -std=gnu11 ${ARCH_X86_64_CFLAGS}")


MACRO(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
  file(GLOB arch_files "*.32.C")

  if(arch_files)
    set(ARCHOBJS_TARGET ${LIBRARY_NAME}_archobjs)

    add_library(${ARCHOBJS_TARGET} OBJECT ${arch_files})

    # Other flags are inherited
    target_compile_options(${ARCHOBJS_TARGET} PRIVATE -m32 -g0 -mcmodel=32 -momit-leaf-frame-pointer -Wa,--64)

    set(${ARCHOBJ_LIBNAME} ${ARCHOBJS_TARGET})
  endif(arch_files)
ENDMACRO(ARCH2OBJ)

set(LD_ARGUMENT -m64 -Wl,--build-id=none -mcmodel=kernel -Wl,-z -Wl,max-page-size=0x1000 -Wl,-melf_x86_64 -nostdinc -nostdlib -nodefaultlibs ${NOPIEFLAG})
set(APPEND_LD_ARGUMENTS )
set(KERNEL_IMAGE_OBJCOPY COMMAND ${OBJCOPY_EXECUTABLE} ${PROJECT_BINARY_DIR}/kernel.x --strip-unneeded ${PROJECT_BINARY_DIR}/kernel.x)
if ("${DEBUG}" STREQUAL "1")
  set(KERNEL_IMAGE_OBJCOPY )
endif()
set(KERNEL_IMAGE_OBJCOPY
  COMMAND ${PROJECT_BINARY_DIR}/add-dbg ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel.dbg
  ${KERNEL_IMAGE_OBJCOPY}
  COMMAND mv ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel64.x && ${OBJCOPY_EXECUTABLE} -O elf32-i386 ${PROJECT_BINARY_DIR}/kernel64.x ${PROJECT_BINARY_DIR}/kernel.x
)

# kvm: Run kvm in non debugging mode
add_custom_target(kvm
        COMMAND qemu-system-x86_64 -m 8M -cpu kvm64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
        COMMENT "Executing `qemu-system-x86_64 -m 8M -cpu kvm64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot`"
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND reset -I
        )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
	COMMAND	qemu-system-x86_64 -m 8M -cpu qemu64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
	COMMENT "Executing `qemu-system-x86_64 -m 8M -cpu qemu64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemugdb: Run qemu in debugging mode
add_custom_target(qemugdb
	COMMAND	qemu-system-x86_64 -s -m 8M -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
	COMMENT "Executing `gdb qemu-system-x86_64 -s -m 8M -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot on localhost:1234`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemutacos: Run qemu in pipe monitor mode for tacos
add_custom_target(qemutacos
  COMMAND qemu-system-x86_64 -hda SWEB-flat.vmdk -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio
  COMMENT "Executing `qemu-system-x86_64 -hda SWEB-flat.vmdk -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )


