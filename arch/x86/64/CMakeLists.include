set(KERNEL_BINARY kernel64.x)

set(ARCH_X86_64_KERNEL_CFLAGS -m64 -O0 -gdwarf-2 -Wall -Wextra -Werror -Wno-nonnull-compare -nostdinc -nostdlib -nostartfiles -nodefaultlibs -fno-builtin -fno-exceptions -fno-stack-protector -ffreestanding -mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow ${NOPICFLAG})

set(KERNEL_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -std=gnu++11 -nostdinc++ -fno-rtti ${ARCH_X86_64_KERNEL_CFLAGS})
set(KERNEL_CMAKE_C_FLAGS   ${CMAKE_C_FLAGS}   -std=gnu11 ${ARCH_X86_64_KERNEL_CFLAGS})

set(ARCH_LD_ARGUMENTS -m64 -Wl,--build-id=none -Wl,-z,max-page-size=0x1000 -Wl,-melf_x86_64 -nostdinc -nostdlib -nodefaultlibs)
set(KERNEL_LD_ARGUMENT ${ARCH_LD_ARGUMENTS} -mcmodel=kernel ${NOPIEFLAG})
set(ARCH_APPEND_LD_ARGUMENTS )


function(ARCH2OBJ ARCHOBJ_LIBNAME LIBRARY_NAME)
  file(GLOB arch_files "*.32.C")

  if(arch_files)
    set(ARCHOBJS_TARGET ${LIBRARY_NAME}_archobjs)

    add_library(${ARCHOBJS_TARGET} OBJECT ${arch_files})

    target_compile_options(${ARCHOBJS_TARGET} PRIVATE
      $<$<COMPILE_LANGUAGE:CXX>:${KERNEL_CMAKE_CXX_FLAGS}>
      $<$<COMPILE_LANGUAGE:C>:${KERNEL_CMAKE_C_FLAGS}>
      -m32 -g0 -mcmodel=32 -momit-leaf-frame-pointer -Wa,--64 -fno-toplevel-reorder
      )

    set(${ARCHOBJ_LIBNAME} ${ARCHOBJS_TARGET} PARENT_SCOPE)
  endif(arch_files)
endfunction(ARCH2OBJ)

set(KERNEL_IMAGE_OBJCOPY COMMAND ${OBJCOPY_EXECUTABLE} ${PROJECT_BINARY_DIR}/kernel.x --strip-unneeded ${PROJECT_BINARY_DIR}/kernel.x)
if ("${DEBUG}" STREQUAL "1")
  set(KERNEL_IMAGE_OBJCOPY )
endif()
set(KERNEL_IMAGE_OBJCOPY
  COMMAND ${PROJECT_BINARY_DIR}/add-dbg ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel.dbg
  ${KERNEL_IMAGE_OBJCOPY}
  COMMAND mv ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel64.x && ${OBJCOPY_EXECUTABLE} -O elf32-i386 ${PROJECT_BINARY_DIR}/kernel64.x ${PROJECT_BINARY_DIR}/kernel.x
  )

set(AVAILABLE_MEMORY 8M)

set(QEMU_BIN qemu-system-x86_64)
set(QEMU_FLAGS_COMMON -m ${AVAILABLE_MEMORY} -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot -smp 4)
string(REPLACE ";" " " QEMU_FLAGS_COMMON_STR "${QEMU_FLAGS_COMMON}")

# kvm: Run kvm in non debugging mode
add_custom_target(kvm
        COMMAND ${QEMU_BIN} ${QEMU_FLAGS_COMMON} -cpu kvm64
        COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -cpu kvm64`"
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND reset -I
        )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
	COMMAND	${QEMU_BIN} ${QEMU_FLAGS_COMMON} -cpu qemu64
	COMMENT "Executing `${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -cpu qemu64`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemugdb: Run qemu in debugging mode
add_custom_target(qemugdb
	COMMAND	${QEMU_BIN} ${QEMU_FLAGS_COMMON} -s
	COMMENT "Executing `gdb ${QEMU_BIN} ${QEMU_FLAGS_COMMON_STR} -s on localhost:1234`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemutacos: Run qemu in pipe monitor mode for tacos
add_custom_target(qemutacos
  COMMAND ${QEMU_BIN} -hda SWEB-flat.vmdk -m ${AVAILABLE_MEMORY} -snapshot -monitor pipe:qemu -nographic -debugcon stdio
  COMMENT "Executing `${QEMU_BIN} -hda SWEB-flat.vmdk -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )


