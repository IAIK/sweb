set(KERNEL_BINARY kernel64.x)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -m64 -O0 -gdwarf-2 -Wall -Wextra -nostdinc -nostdlib -nostartfiles -nodefaultlibs -nostdinc++ -fno-builtin -fno-rtti -fno-exceptions -fno-stack-protector -ffreestanding -mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow")
set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -std=gnu11   -m64 -O0 -gdwarf-2 -Wall -Wextra -nostdinc -nostdlib -nostartfiles -nodefaultlibs             -fno-builtin           -fno-exceptions -fno-stack-protector -ffreestanding -mcmodel=kernel -mno-red-zone -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow")

MACRO(ARCH2OBJ OUTPUTOBJNAMES)

  file(GLOB arch_files "*.32.C")

  foreach(src ${arch_files})
    GET_FILENAME_COMPONENT(src_name ${src} NAME)
    set(ARCH_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/${src_name})
    set(ARCH_ASM ${CMAKE_CURRENT_BINARY_DIR}/${src_name}.S)
    set(ARCH_OBJECT ${CMAKE_CURRENT_BINARY_DIR}/${src_name}.o)
    set(ARCH_OBJECTS ${ARCH_OBJECTS} ${ARCH_OBJECT})

    add_custom_command(
    OUTPUT ${ARCH_OBJECT}
    COMMAND ${CMAKE_CXX_COMPILER} -momit-leaf-frame-pointer -S "$(CXX_DEFINES)" -I${CMAKE_CURRENT_SOURCE_DIR}/../include -I${CMAKE_CURRENT_SOURCE_DIR}/../../common/include -std=gnu++11 -m32 -O0 -g0 -Wall -Wextra  -nostdinc -nostdlib -nostartfiles -nodefaultlibs -nostdinc++ -fno-builtin -fno-rtti -fno-exceptions -fno-stack-protector -ffreestanding -mno-mmx -mno-sse2 -mno-sse3 -mno-3dnow -c -o ${ARCH_ASM} ${ARCH_SOURCE}
    COMMAND ${CMAKE_CXX_COMPILER} "$(CXX_DEFINES)" "$(CXX_FLAGS)" -c -o ${ARCH_OBJECT} ${ARCH_ASM}
    DEPENDS ${ARCH_SOURCE}
    )
  ENDFOREACH(src)

  set(${OUTPUTOBJNAMES} ${ARCH_OBJECTS})
ENDMACRO(ARCH2OBJ)

set(LD_ARGUMENT -m64 -Wl,--build-id=none -mcmodel=kernel -Wl,-z -Wl,max-page-size=0x1000 -Wl,-melf_x86_64 -nostdinc -nostdlib -nodefaultlibs)
set(APPEND_LD_ARGUMENTS )
set(KERNEL_IMAGE_OBJCOPY
  COMMAND echo "SMAP" > ${PROJECT_BINARY_DIR}/kernel.smap
  COMMAND grep -E "^ *0x[0123456789abcdef]{16} {16}" ${PROJECT_BINARY_DIR}/kernel.map | sort -u | tr -s ' ' >> ${PROJECT_BINARY_DIR}/kernel.smap
  COMMAND cp ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel.dwarf.x
  COMMAND ${OBJCOPY_EXECUTABLE} ${PROJECT_BINARY_DIR}/kernel.x --strip-unneeded ${PROJECT_BINARY_DIR}/kernel.x
  COMMAND mv ${PROJECT_BINARY_DIR}/kernel.x ${PROJECT_BINARY_DIR}/kernel64.x && ${OBJCOPY_EXECUTABLE} -O elf32-i386 ${PROJECT_BINARY_DIR}/kernel64.x ${PROJECT_BINARY_DIR}/kernel.x
)

# kvm: Run kvm in non debugging mode
add_custom_target(kvm
        COMMAND qemu-system-x86_64 -m 8M -cpu kvm64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
        COMMENT "Executing `qemu-system-x86_64 -m 8M -cpu kvm64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot`"
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND reset -I
        )

# qemu: Run qemu in non debugging mode
add_custom_target(qemu
	COMMAND	qemu-system-x86_64 -m 8M -cpu qemu64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
	COMMENT "Executing `qemu-system-x86_64 -m 8M -cpu qemu64 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemugdb: Run qemu in debugging mode
add_custom_target(qemugdb
	COMMAND	qemu-system-x86_64 -s -m 8M -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
	COMMENT "Executing `gdb qemu-system-x86_64 -s -m 8M -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot on localhost:1234`"
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND reset -I
	)

# qemutacos: Run qemu in pipe monitor mode for tacos
add_custom_target(qemutacos
  COMMAND qemu-system-x86_64 -hda SWEB-flat.vmdk -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio
  COMMENT "Executing `qemu-system-x86_64 -hda SWEB-flat.vmdk -m 8M -snapshot -monitor pipe:qemu -nographic -debugcon stdio`"
  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
  )


